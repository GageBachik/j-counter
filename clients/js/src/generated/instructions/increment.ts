/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from 'gill';
import { COUNTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INCREMENT_DISCRIMINATOR = 1;

export function getIncrementDiscriminatorBytes() {
  return getU8Encoder().encode(INCREMENT_DISCRIMINATOR);
}

export type IncrementInstruction<
  TProgram extends string = typeof COUNTER_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountCounter extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountCounter extends string
        ? WritableAccount<TAccountCounter>
        : TAccountCounter,
      ...TRemainingAccounts,
    ]
  >;

export type IncrementInstructionData = { discriminator: number };

export type IncrementInstructionDataArgs = {};

export function getIncrementInstructionDataEncoder(): FixedSizeEncoder<IncrementInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: INCREMENT_DISCRIMINATOR })
  );
}

export function getIncrementInstructionDataDecoder(): FixedSizeDecoder<IncrementInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getIncrementInstructionDataCodec(): FixedSizeCodec<
  IncrementInstructionDataArgs,
  IncrementInstructionData
> {
  return combineCodec(
    getIncrementInstructionDataEncoder(),
    getIncrementInstructionDataDecoder()
  );
}

export type IncrementInput<
  TAccountOwner extends string = string,
  TAccountCounter extends string = string,
> = {
  /** Owner of the counter */
  owner: TransactionSigner<TAccountOwner>;
  /** Counter PDA to increment */
  counter: Address<TAccountCounter>;
};

export function getIncrementInstruction<
  TAccountOwner extends string,
  TAccountCounter extends string,
  TProgramAddress extends Address = typeof COUNTER_PROGRAM_ADDRESS,
>(
  input: IncrementInput<TAccountOwner, TAccountCounter>,
  config?: { programAddress?: TProgramAddress }
): IncrementInstruction<TProgramAddress, TAccountOwner, TAccountCounter> {
  // Program address.
  const programAddress = config?.programAddress ?? COUNTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    counter: { value: input.counter ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.counter),
    ],
    programAddress,
    data: getIncrementInstructionDataEncoder().encode({}),
  } as IncrementInstruction<TProgramAddress, TAccountOwner, TAccountCounter>;

  return instruction;
}

export type ParsedIncrementInstruction<
  TProgram extends string = typeof COUNTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Owner of the counter */
    owner: TAccountMetas[0];
    /** Counter PDA to increment */
    counter: TAccountMetas[1];
  };
  data: IncrementInstructionData;
};

export function parseIncrementInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedIncrementInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      counter: getNextAccount(),
    },
    data: getIncrementInstructionDataDecoder().decode(instruction.data),
  };
}
